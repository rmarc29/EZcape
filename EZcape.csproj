<Project Sdk="Microsoft.NET.Sdk">

	<PropertyGroup>
		<OutputType>WinExe</OutputType>
		<TargetFramework>net8.0-windows</TargetFramework>
		<Nullable>enable</Nullable>
		<ImplicitUsings>enable</ImplicitUsings>
		<UseWPF>true</UseWPF>
		<ApplicationIcon>Assets\favicon.ico</ApplicationIcon>
		<UserSecretsId>7dd30dd2-94ba-4adc-8908-31354ff57abb</UserSecretsId>
	</PropertyGroup>

	<ItemGroup>
	  <None Remove="Fonts\RussoOne-Regular.ttf" />
	</ItemGroup>

	<ItemGroup>
		<PackageReference Include="Microsoft.Extensions.Configuration.UserSecrets" Version="6.0.1" />
		<PackageReference Include="Newtonsoft.Json" Version="13.0.3" />
	</ItemGroup>

	<ItemGroup>
	  <Resource Include="Fonts\RussoOne-Regular.ttf">
	    <CopyToOutputDirectory>Never</CopyToOutputDirectory>
	  </Resource>
	</ItemGroup>

	<!-- This is the only section you need. -->
	<!-- It FINDS the C# file the SDK already included, and just UPDATES it -->
	<!-- to tell it that it "Depends On" the XAML file. This creates the nesting. -->
	<ItemGroup>
		<Compile Update="MainWindow.xaml.cs">
			<DependentUpon>MainWindow.xaml</DependentUpon>
		</Compile>
		<Compile Update="Properties\Resources.Designer.cs">
		  <DesignTime>True</DesignTime>
		  <AutoGen>True</AutoGen>
		  <DependentUpon>Resources.resx</DependentUpon>
		</Compile>
	</ItemGroup>
	<ItemGroup>
	  <EmbeddedResource Update="Properties\Resources.resx">
	    <Generator>ResXFileCodeGenerator</Generator>
	    <LastGenOutput>Resources.Designer.cs</LastGenOutput>
	  </EmbeddedResource>
	</ItemGroup>

	<!-- ==================================================================== -->
	<!-- ======================= AUTO-SIGNING LOGIC ======================= -->
	<!-- ==================================================================== -->

	<!-- This section defines the properties for our signing process. -->
	<PropertyGroup>
		<SignOnPublish>true</SignOnPublish>
		<PfxFile>$(MSBuildProjectDirectory)\EZcapeCert.pfx</PfxFile>
		<!-- The PfxPassword is read from User Secrets. -->
		<TimestampServerUrl>http://timestamp.comodoca.com</TimestampServerUrl>
	</PropertyGroup>

	<!-- This is the MSBuild Target that will run the signing command. -->
	<Target Name="SignPackage" AfterTargets="Publish" Condition=" '$(SignOnPublish)' == 'true' ">

		<!-- Define properties for the command -->
		<PropertyGroup>
			<ApplicationPath>$(PublishDir)$(AssemblyName).exe</ApplicationPath>
			<SignCommand>"$(WindowsSdkDir)bin\$(WindowsSdkVersion)x64\signtool.exe" sign /f "$(PfxFile)" /p "$(PfxPassword)" /fd SHA256 /t "$(TimestampServerUrl)" "$(ApplicationPath)"</SignCommand>
		</PropertyGroup>

		<!-- Execute the command using the assembled property -->
		<Exec Command="$(SignCommand)" />

		<Message Text="Successfully signed $(ApplicationPath)" Importance="high" />

	</Target>

</Project>